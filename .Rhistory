gg_nmr+
geom_path(data=spectra2, aes(x = ppm, y = intensity, color = source))+
ylim(-1000,25000)+
# if you need to add labels:
annotate("text", label = "aliphatic", x = 1.4, y = -700)+
annotate("text", label = "O-alkyl", x = 3.5, y = -700)+
annotate("text", label = "alpha-H", x = 4.45, y = -700)+
annotate("text", label = "aromatic", x = 7, y = -700)+
annotate("text", label = "amide", x = 8.1, y = -700)+
annotate("text", label = "\n\nWATER", x = 3.5, y = Inf)+
annotate("text", label = "\n\nDMSO", x = 2.48, y = Inf)+
#geom_vline(xintercept = WATER_start, linetype="longdash")+
#geom_vline(xintercept = WATER_stop, linetype="longdash")+
#geom_vline(xintercept = DMSO_start, linetype="dashed")+
#geom_vline(xintercept = DMSO_stop, linetype="dashed")+
facet_wrap(~source, scales = "free_y")+theme(legend.position = "none")
geom_path(data=spectra2, aes(x = ppm, y = intensity)+
#
# PART III: PLOTTING THE SPECTRA ----
## since we created the base gg_nmr earlier, we only need to add a single layer for the geom_path spectra
gg_nmr+
geom_path(data=spectra2, aes(x = ppm, y = intensity))+
ylim(-1000,25000)+
# if you need to add labels:
annotate("text", label = "aliphatic", x = 1.4, y = -700)+
annotate("text", label = "O-alkyl", x = 3.5, y = -700)+
annotate("text", label = "alpha-H", x = 4.45, y = -700)+
annotate("text", label = "aromatic", x = 7, y = -700)+
annotate("text", label = "amide", x = 8.1, y = -700)+
annotate("text", label = "\n\nWATER", x = 3.5, y = Inf)+
annotate("text", label = "\n\nDMSO", x = 2.48, y = Inf)+
#geom_vline(xintercept = WATER_start, linetype="longdash")+
#geom_vline(xintercept = WATER_stop, linetype="longdash")+
#geom_vline(xintercept = DMSO_start, linetype="dashed")+
#geom_vline(xintercept = DMSO_stop, linetype="dashed")+
facet_wrap(~source, scales = "free_y")+theme(legend.position = "none")
#
# PART III: PLOTTING THE SPECTRA ----
## since we created the base gg_nmr earlier, we only need to add a single layer for the geom_path spectra
gg_nmr+
geom_path(data=spectra2, aes(x = ppm, y = intensity))+
ylim(-1000,25000)+
# if you need to add labels:
annotate("text", label = "aliphatic", x = 1.4, y = -700)+
annotate("text", label = "O-alkyl", x = 3.5, y = -700)+
annotate("text", label = "alpha-H", x = 4.45, y = -700)+
annotate("text", label = "aromatic", x = 7, y = -700)+
annotate("text", label = "amide", x = 8.1, y = -700)+
annotate("text", label = "\n\nWATER", x = 3.5, y = Inf)+
annotate("text", label = "\n\nDMSO", x = 2.48, y = Inf)
ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path()
ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path()+
scale_x_continuous(direction = -1)
ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path()+
scale_x_continuous(direction = "-1")
ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path()+
scale_x_reverse(limits = c(10,0))+
## CLEANING
spectra2 =
spectra %>%
# retain only values 0-10ppm
filter(ppm>=0&ppm<=10)
ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path()+
scale_x_reverse(limits = c(10,0))
ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path()+
scale_x_reverse(limits = c(10,0))+
ylim(-1000,25000)
ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path()+
scale_x_reverse(limits = c(10,0))+
ylim(-1000,25000)+
theme_bw()
ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path()+
scale_x_reverse(limits = c(10,0))+
ylim(-1000,25000)+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path(size = 2)+
scale_x_reverse(limits = c(10,0))+
ylim(-1000,25000)+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path(size = 1)+
scale_x_reverse(limits = c(10,0))+
ylim(-1000,25000)+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path(size = 0.5)+
scale_x_reverse(limits = c(10,0))+
ylim(-1000,25000)+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave(gg, "gg.png")
gg = ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path(size = 0.5)+
scale_x_reverse(limits = c(10,0))+
ylim(-1000,25000)+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave(gg, "gg.png")
ggsave(gg, path = "gg.png")
gg_save(gg, path = "gg.png")
png(gg,width=300,height=300,units="px",bg = "transparent")
gg = ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path(size = 0.5)+
scale_x_reverse(limits = c(10,0))+
ylim(-1000,25000)+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave(path = "gg.png")
ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path(size = 0.5)+
scale_x_reverse(limits = c(10,0))+
ylim(-1000,25000)+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave(path = "gg.png")
ggsave("gg.png")
png("gg.png",width=300,height=300,units="px",bg = "transparent")
gg2 = png("gg.png",width=300,height=300,units="px",bg = "transparent")
gg = ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path(size = 0.5)+
scale_x_reverse(limits = c(10,0))+
ylim(-1000,25000)+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "transparent"))
ggsave(gg, filename = "tr_tst2.png",  bg = "transparent")
gg = ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path(size = 0.5)+
scale_x_reverse(limits = c(10,0))+
ylim(-1000,25000)+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"))
gg = ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path(size = 0.5)+
scale_x_reverse(limits = c(10,0))+
ylim(-1000,25000)+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"))
ggsave(gg, filename = "tr_tst2.png",  bg = "transparent")
gg = ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path(size = 0.5, color = "white")+
scale_x_reverse(limits = c(10,0))+
ylim(-1000,25000)+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"))
ggsave(gg, filename = "tr_tst2.png",  bg = "transparent")
gg = ggplot(spectra2, aes(x = ppm, y = intensity))+
geom_path(size = 0.8, color = "white")+
scale_x_reverse(limits = c(10,0))+
ylim(-1000,25000)+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"))
ggsave(gg, filename = "tr_tst2.png",  bg = "transparent")
ggsave(gg, filename = "tr_tst2.png",  bg = "transparent", height = 100, width = 200)
ggsave(gg, filename = "tr_tst2.png",  bg = "transparent", height = 1, width = 2)
ggsave(gg, filename = "tr_tst2.png",  bg = "transparent", height = 3, width = 6)
source("1-processing.R")
source('~/OneDrive - PNNL/Documents/GitHub/nmr_processing/1-processing.R', echo=TRUE)
library(readxl)
library(readr)
library(tidyverse)
library(dplyr)
library(ggplot2)
## choose which set of BINS SET to use
cat("ACTION: choose correct value of BINSET
a.> Clemente2012
b.> Lynch2019
type this into the code
e.g.: BINSET = [quot]Clemente2012[quot]")
BINSET = "Clemente2012"
bins = read_csv("nmr_bins.csv")
bins2 =
bins %>%
# here we select only the BINSET we chose above
dplyr::select(group,startstop,BINSET) %>%
na.omit %>%
spread(startstop,BINSET)
#
## 2. bins for water and DMSO solvent ----
WATER_start = 3
WATER_stop = 4
DMSO_start = 2.25
DMSO_stop = 2.75
## 3. spectra plot parameters ----
gg_nmr =
ggplot()+
geom_rect(data=bins2, aes(xmin=start, xmax=stop, ymin=-Inf, ymax=+Inf, fill=group), color="grey70",alpha=0.1)+
scale_x_reverse(limits = c(10,0))+
xlab("shift, ppm")+
ylab("intensity")+
theme_bw() %+replace%
theme(legend.position = "right",
legend.key=element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.key.size = unit(1.5, 'lines'),
panel.border = element_rect(color="black",size=1.5, fill = NA),
plot.title = element_text(hjust = 0.05, size = 14),
axis.text = element_text(size = 14, color = "black"),
axis.title = element_text(size = 14, face = "bold", color = "black"),
# formatting for facets
panel.background = element_blank(),
strip.background = element_rect(colour="white", fill="white"), #facet formatting
panel.spacing.x = unit(1.5, "lines"), #facet spacing for x axis
panel.spacing.y = unit(1.5, "lines"), #facet spacing for x axis
strip.text.x = element_text(size=12, face="bold"), #facet labels
strip.text.y = element_text(size=12, face="bold", angle = 270) #facet labels
)
filePaths <- list.files(path = "data/",pattern = "*.csv", full.names = TRUE)
spectra <- do.call(rbind, lapply(filePaths, function(path) {
# the files are tab-delimited, so read.csv will not work. import using read.table
# there is no header. so create new column names
# then add a new column `source` to denote the file name
df <- read.table(path, header=FALSE, col.names = c("ppm", "intensity"))
df[["source"]] <- rep(path, nrow(df))
df}))
filePaths <- list.files(path = "data/misc",pattern = "*.csv", full.names = TRUE)
spectra <- do.call(rbind, lapply(filePaths, function(path) {
# the files are tab-delimited, so read.csv will not work. import using read.table
# there is no header. so create new column names
# then add a new column `source` to denote the file name
df <- read.table(path, header=FALSE, col.names = c("ppm", "intensity"))
df[["source"]] <- rep(path, nrow(df))
df}))
filePaths <- list.files(path = "data/misc/",pattern = "*.csv", full.names = TRUE)
spectra <- do.call(rbind, lapply(filePaths, function(path) {
# the files are tab-delimited, so read.csv will not work. import using read.table
# there is no header. so create new column names
# then add a new column `source` to denote the file name
df <- read.table(path, header=FALSE, col.names = c("ppm", "intensity"))
df[["source"]] <- rep(path, nrow(df))
df}))
filePaths <- list.files(path = "data/spectra/",pattern = "*.csv", full.names = TRUE)
spectra <- do.call(rbind, lapply(filePaths, function(path) {
# the files are tab-delimited, so read.csv will not work. import using read.table
# there is no header. so create new column names
# then add a new column `source` to denote the file name
df <- read.table(path, header=FALSE, col.names = c("ppm", "intensity"))
df[["source"]] <- rep(path, nrow(df))
df}))
## CLEANING
spectra2 =
spectra %>%
# retain only values 0-10ppm
filter(ppm>=0&ppm<=10)
# remove water and DMSO regions
filter(!(ppm>DMSO_start&ppm<WATER_stop)) %>%
filter(!(ppm>DMSO_start&ppm<DMSO_stop))
View(spectra)
## CLEANING
spectra2 =
spectra %>%
# retain only values 0-10ppm
filter(ppm>=0&ppm<=10)
temp = spectra2 %>%
filter(source%in% c("data//29_2_TEST.csv",
"data//29_3_TEST.csv",
"data//29_amp.csv",
"data//34_TEST3.csv",
"data//34_amp.csv"))
#
# PART III: PLOTTING THE SPECTRA ----
## since we created the base gg_nmr earlier, we only need to add a single layer for the geom_path spectra
gg_nmr+
geom_path(data=temp, aes(x = ppm, y = intensity, color = source))+
ylim(-1000,25000)+
# if you need to add labels:
annotate("text", label = "aliphatic", x = 1.4, y = -700)+
annotate("text", label = "O-alkyl", x = 3.5, y = -700)+
annotate("text", label = "alpha-H", x = 4.45, y = -700)+
annotate("text", label = "aromatic", x = 7, y = -700)+
annotate("text", label = "amide", x = 8.1, y = -700)+
annotate("text", label = "\n\nWATER", x = 3.5, y = Inf)+
annotate("text", label = "\n\nDMSO", x = 2.48, y = Inf)+
geom_vline(xintercept = WATER_start, linetype="longdash")+
geom_vline(xintercept = WATER_stop, linetype="longdash")+
geom_vline(xintercept = DMSO_start, linetype="dashed")+
geom_vline(xintercept = DMSO_stop, linetype="dashed")+
facet_wrap(~source, scales = "free_y")+theme(legend.position = "none")
temp = spectra2 %>%
filter(source%in% c("data//29_2_TEST.csv",
"data//29_3_TEST.csv",
"data//29_amp.csv",
"data//34_TEST3.csv",
"data//34_amp.csv"))
View(spectra2)
# temp = spectra2 %>%
#   filter(source%in% c("data//29_2_TEST.csv",
#                       "data//29_3_TEST.csv",
#                       "data//29_amp.csv",
#                       "data//34_TEST3.csv",
#                       "data//34_amp.csv"))
#
# PART III: PLOTTING THE SPECTRA ----
## since we created the base gg_nmr earlier, we only need to add a single layer for the geom_path spectra
gg_nmr+
geom_path(data=spectra2, aes(x = ppm, y = intensity, color = source))+
ylim(-1000,25000)+
# if you need to add labels:
annotate("text", label = "aliphatic", x = 1.4, y = -700)+
annotate("text", label = "O-alkyl", x = 3.5, y = -700)+
annotate("text", label = "alpha-H", x = 4.45, y = -700)+
annotate("text", label = "aromatic", x = 7, y = -700)+
annotate("text", label = "amide", x = 8.1, y = -700)+
annotate("text", label = "\n\nWATER", x = 3.5, y = Inf)+
annotate("text", label = "\n\nDMSO", x = 2.48, y = Inf)+
geom_vline(xintercept = WATER_start, linetype="longdash")+
geom_vline(xintercept = WATER_stop, linetype="longdash")+
geom_vline(xintercept = DMSO_start, linetype="dashed")+
geom_vline(xintercept = DMSO_stop, linetype="dashed")+
facet_wrap(~source, scales = "free_y")+theme(legend.position = "none")
## CLEANING
spectra2 =
spectra %>%
# retain only values 0-10ppm
filter(ppm>=0&ppm<=10) %>%
# remove water and DMSO regions
filter(!(ppm>DMSO_start&ppm<WATER_stop)) %>%
filter(!(ppm>DMSO_start&ppm<DMSO_stop))
filePaths <- list.files(path = "data/spectra/",pattern = "*.csv", full.names = TRUE)
spectra <- do.call(rbind, lapply(filePaths, function(path) {
# the files are tab-delimited, so read.csv will not work. import using read.table
# there is no header. so create new column names
# then add a new column `source` to denote the file name
df <- read.table(path, header=FALSE, col.names = c("ppm", "intensity"))
df[["source"]] <- rep(path, nrow(df))
df}))
## CLEANING
spectra2 =
spectra %>%
# retain only values 0-10ppm
filter(ppm>=0&ppm<=10) %>%
# remove water and DMSO regions
filter(!(ppm>DMSO_start&ppm<WATER_stop)) %>%
filter(!(ppm>DMSO_start&ppm<DMSO_stop))
source("1-processing.R")
spectra2 =
spectra2 %>%
filter(!(ppm>DMSO_start&ppm<WATER_stop))
gg_nmr+
geom_path(data=spectra2, aes(x = ppm, y = intensity, color = source))+
# if you need to add labels:
annotate("text", label = "aliphatic", x = 1.4, y = -500)+
annotate("text", label = "O-alkyl", x = 3.5, y = -500)+
annotate("text", label = "alpha-H\n (protein)", x = 4.45, y = -600)+
annotate("text", label = "aromatic", x = 7, y = -500)+
annotate("text", label = "amide", x = 8.1, y = -500)+
annotate("text", label = "\n\nWATER", x = 3.5, y = Inf)+
annotate("text", label = "\n\nDMSO", x = 2.48, y = Inf)+
geom_vline(xintercept = WATER_start, linetype="longdash")+
geom_vline(xintercept = WATER_stop, linetype="longdash")+
geom_vline(xintercept = DMSO_start, linetype="dashed")+
geom_vline(xintercept = DMSO_stop, linetype="dashed")
gg_nmr+
geom_path(data=spectra[(spectra$ppm>0&spectra$ppm<10),], aes(x = ppm, y = intensity, color = source))+
ylim(-700,25000)+
#expand_limits(y=c(NA, 35000))+
# if you need to add labels:
annotate("text", label = "aliphatic", x = 1.4, y = -500)+
annotate("text", label = "O-alkyl", x = 3.5, y = -500)+
annotate("text", label = "alpha-H\n (protein)", x = 4.45, y = -600)+
annotate("text", label = "aromatic", x = 7, y = -500)+
annotate("text", label = "amide", x = 8.1, y = -500)+
annotate("text", label = "\n\nWATER", x = 3.5, y = Inf)+
annotate("text", label = "\n\nDMSO", x = 2.48, y = Inf)+
geom_vline(xintercept = WATER_start, linetype="longdash")+
geom_vline(xintercept = WATER_stop, linetype="longdash")+
geom_vline(xintercept = DMSO_start, linetype="dashed")+
geom_vline(xintercept = DMSO_stop, linetype="dashed")
View(gg_nmr)
library(readxl)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
## choose which set of BINS SET to use
cat("ACTION: choose correct value of BINSET
a.> Clemente2012
b.> Lynch2019
type this into the code
e.g.: BINSET = [quot]Clemente2012[quot]")
BINSET = "Clemente2012"
bins = read_csv("nmr_bins.csv")
bins2 =
bins %>%
# here we select only the BINSET we chose above
dplyr::select(group,startstop,BINSET) %>%
na.omit %>%
spread(startstop,BINSET)
## 3. spectra plot parameters ----
gg_nmr =
ggplot()+
geom_rect(data=bins2, aes(xmin=start, xmax=stop, ymin=-Inf, ymax=+Inf, fill=group), color="grey70",alpha=0.1)+
scale_x_reverse(limits = c(10,0))+
xlab("shift, ppm")+
ylab("intensity")+
# labels:
annotate("text", label = "aliphatic", x = 1.4, y = -0.1)+
annotate("text", label = "O-alkyl", x = 3.5, y = -0.1)+
annotate("text", label = "alpha-H", x = 4.45, y = -0.1)+
annotate("text", label = "aromatic", x = 7, y = -0.1)+
annotate("text", label = "amide", x = 8.1, y = -0.1)+
annotate("text", label = "\n\nWATER", x = 3.5, y = Inf)+
annotate("text", label = "\n\nDMSO", x = 2.48, y = Inf)+
geom_vline(xintercept = WATER_start, linetype="longdash")+
geom_vline(xintercept = WATER_stop, linetype="longdash")+
geom_vline(xintercept = DMSO_start, linetype="dashed")+
geom_vline(xintercept = DMSO_stop, linetype="dashed")+
theme_bw() %+replace%
theme(legend.position = "right",
legend.key=element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.key.size = unit(1.5, 'lines'),
panel.border = element_rect(color="black",size=1.5, fill = NA),
plot.title = element_text(hjust = 0.05, size = 14),
axis.text = element_text(size = 14, color = "black"),
axis.title = element_text(size = 14, face = "bold", color = "black"),
# formatting for facets
panel.background = element_blank(),
strip.background = element_rect(colour="white", fill="white"), #facet formatting
panel.spacing.x = unit(1.5, "lines"), #facet spacing for x axis
panel.spacing.y = unit(1.5, "lines"), #facet spacing for x axis
strip.text.x = element_text(size=12, face="bold"), #facet labels
strip.text.y = element_text(size=12, face="bold", angle = 270) #facet labels
)
#
## 2. bins for water and DMSO solvent ----
WATER_start = 3
WATER_stop = 4
DMSO_start = 2.25
DMSO_stop = 2.75
## 3. spectra plot parameters ----
gg_nmr =
ggplot()+
geom_rect(data=bins2, aes(xmin=start, xmax=stop, ymin=-Inf, ymax=+Inf, fill=group), color="grey70",alpha=0.1)+
scale_x_reverse(limits = c(10,0))+
xlab("shift, ppm")+
ylab("intensity")+
# labels:
annotate("text", label = "aliphatic", x = 1.4, y = -0.1)+
annotate("text", label = "O-alkyl", x = 3.5, y = -0.1)+
annotate("text", label = "alpha-H", x = 4.45, y = -0.1)+
annotate("text", label = "aromatic", x = 7, y = -0.1)+
annotate("text", label = "amide", x = 8.1, y = -0.1)+
annotate("text", label = "\n\nWATER", x = 3.5, y = Inf)+
annotate("text", label = "\n\nDMSO", x = 2.48, y = Inf)+
geom_vline(xintercept = WATER_start, linetype="longdash")+
geom_vline(xintercept = WATER_stop, linetype="longdash")+
geom_vline(xintercept = DMSO_start, linetype="dashed")+
geom_vline(xintercept = DMSO_stop, linetype="dashed")+
theme_bw() %+replace%
theme(legend.position = "right",
legend.key=element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.key.size = unit(1.5, 'lines'),
panel.border = element_rect(color="black",size=1.5, fill = NA),
plot.title = element_text(hjust = 0.05, size = 14),
axis.text = element_text(size = 14, color = "black"),
axis.title = element_text(size = 14, face = "bold", color = "black"),
# formatting for facets
panel.background = element_blank(),
strip.background = element_rect(colour="white", fill="white"), #facet formatting
panel.spacing.x = unit(1.5, "lines"), #facet spacing for x axis
panel.spacing.y = unit(1.5, "lines"), #facet spacing for x axis
strip.text.x = element_text(size=12, face="bold"), #facet labels
strip.text.y = element_text(size=12, face="bold", angle = 270) #facet labels
)
gg_nmr
